# AArch64 CRPYTOCAP allowed instruction decoding
#
#  Copyright (c) 2023 Linaro, Ltd
#
# This library is free software; you can redistribute it and/or
# modify it under the terms of the GNU Lesser General Public
# License as published by the Free Software Foundation; either
# version 2.1 of the License, or (at your option) any later version.
#
# This library is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with this library; if not, see <http://www.gnu.org/licenses/>.

#
# This file is processed by scripts/decodetree.py
#

#FORMATS
#format for capability manipulation instructions 
&idx_rw_crd_rs idx rw crd rs  
&crd_crs crd crs
&crd_crs_rs crd crs rs      
&imm_idx_cr_r imm idx cr r  
&imm_idx_r_cr imm idx r cr  
&imm_idx_crd_crs imm idx crd crs  
&crs crs  
&rs rs  
&imm_rs imm rs  
&imm_rs1_rs2 imm rs1 rs2
&nill  
&cc_r cc r
&rw_cc_r rw cc r
&idx_rw_cc_r idx rw cc r
&cc cc
&crd_rs1_rs2 crd rs1 rs2  
&crd_imm crd imm
&rs1_rs2 rs1 rs2


#OPERATION TYPES
@op_idx_rw_crd_rs       ... .... ..... ..... . idx:3 rw:1 crd:5 rs:5 &idx_rw_crd_rs
@op_crd_crs             ... .... ..... ..... ..... crd:5 crs:5 &crd_crs
@op_crd_crs_rs          ... .... ..... ..... crd:5 crs:5 rs:5 &crd_crs_rs
@op_imm_idx_cr_r        ... .... ..... imm:8 idx:2 cr:5 r:5 &imm_idx_cr_r
@op_imm_idx_r_cr        ... .... ..... imm:8 idx:2 r:5 cr:5 &imm_idx_r_cr
@op_imm_idx_crd_crs     ... .... ..... imm:8 idx:2 crd:5 crs:5 &imm_idx_crd_crs
@op_rs                  ... .... ..... ..... ..... ..... rs:5 &rs
@op_imm_rs              ... .... ..... ..... ..... .... imm:1 rs:5 &imm_rs
@op_crs                 ... .... ..... ..... ..... ..... crs:5 &crs
@op_imm_rs1_rs2         ... .... ..... ..... .... imm:1 rs1:5 rs2:5 &imm_rs1_rs2
@op_nill                ... .... ..... ..... ..... ..... ..... &nill
@op_cc_r                ... .... ..... ..... ..... .. cc:3 r:5 &cc_r
@op_idx_rw_cc_r         ... .... ..... ..... ..  idx:4 rw:1 cc:3 r:5 &idx_rw_cc_r
@op_cc                  ... .... ..... ..... ..... ..... .. cc:3 &cc
@op_crd_rs1_rs2         ... .... ..... ..... crd:5 rs1:5 rs2:5 &crd_rs1_rs2
@op_crd_imm             ... .... ..... ..... ..... crd:5 imm:5 &crd_imm
@op_rs1_rs2             ... .... ..... ..... ..... rs1:5 rs2:5 &rs1_rs2


#CAPABILITY MANIPULATION INSTRUCTIONS
#a generic capability register manipulation instruction based on index (idx)
CMANIP      000 0001 01111 00000 0 ... . ..... ..... @op_idx_rw_crd_rs
CMOV        000 0001 10000 00000 00000 ..... .....  @op_crd_crs
CSETBASE    000 0001 00101 00000 ..... ..... .....  @op_crd_crs_rs
CSETSIZE    000 0001 00110 00000 ..... ..... .....  @op_crd_crs_rs
CSETPERMS   000 0001 00111 00000 ..... ..... .....  @op_crd_crs_rs
CSETADDR    000 0001 01000 00000 ..... ..... .....  @op_crd_crs_rs
CSIGN       000 0001 01001 00000 00000 00000 .....  @op_crs
#this is an illegal/temporary user instruction placed for debug purposes, which will require EL1 privileges later.
CINCOFFSET  000 0001 11100 00000 00000 ..... .....  @op_crd_imm
CCREATE     000 0001 10100 00000 ..... ..... .....  @op_crd_rs1_rs2


#OTHER INSTRUCTIONS
READTCR     000 0001 01010 00000 00000 00000 .....  @op_rs
UPDTCR      000 0001 01011 00000 00000 00000 .....  @op_rs
#this is a user instruction since mrs instruction requires kernel privileges. 
#the security relies on the assumption user still cannot update TTBR registers.
READTTBR    000 0001 10011 00000 00000 0000 . .....  @op_imm_rs

#TODO: load/store for PTCR registers for interrupt/context saves

#KEY MANIPULATIONS
READCKEYS   000 0001 10001 00000 0000 . ..... .....  @op_imm_rs1_rs2
UPDCKEYS    000 0001 10010 00000 0000 . ..... .....  @op_imm_rs1_rs2

#MEMORY INSTRUCTIONS
#intra-domain capability load/store
LDC         000 0001 00000 ........ .. ..... .....  @op_imm_idx_cr_r
STC         000 0001 00001 ........ .. ..... .....  @op_imm_idx_cr_r
#cross-domaion data load/store
CLDG        000 0001 00010 ........ .. ..... .....  @op_imm_idx_r_cr
CSTG        000 0001 00011 ........ .. ..... .....  @op_imm_idx_r_cr
#cross-domaion capability load
CLDC        000 0001 00100 ........ .. ..... .....  @op_imm_idx_crd_crs


#DOMAIN SWITCH INSTRUCTIONS
#EL0 -> EL1
CCALL       000 0001 01101 00000 00000 00000 00000  @op_nill
CRET        000 0001 01110 00000 00000 00000 00000  @op_nill
#EL1 -> EL0
CJMP        000 0001 10101 00000 00000 00000 00000  @op_nill

#READSPEL1   000 0001 11100 00000 00000 00000 .....  @op_rs

CMOVCL      000 0001 10110 00000 00 .... . ... ..... @op_idx_rw_cc_r
CSIGNCL     000 0001 10111 00000 00000 00000 00 ...  @op_cc
CLDCL       000 0001 11001 00000 00000 00 ... ..... @op_cc_r
CSTCL       000 0001 11010 00000 00000 00 ... ..... @op_cc_r

#EL0 -> EL1 with predefined SYCALL_ID
DCALL       000 0001 11101 00000 00000 00000 00000  @op_nill
DRET        000 0001 11110 00000 00000 00000 00000  @op_nill
DGRANT      000 0001 11111 00000 00000 ..... .....  @op_rs1_rs2